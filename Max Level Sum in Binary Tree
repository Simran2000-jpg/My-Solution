using map:
class Solution{
  public:
     void post(unordered_map<int,int>&mp,Node* root,int level){
        if(root==NULL)return;
        mp[level]+=root->data;
             post(mp,root->left,level+1);
                  post(mp,root->right,level+1);
                  return;
    }
    int maxLevelSum(Node* root) {
        unordered_map<int,int>mp;//{level,total level sum}
        int level=0;
        post(mp,root,level);
        int ans=INT_MIN;
        for(auto it:mp){
            int temp=it.second;
            ans=max(temp,ans);
        }
        return ans;
    }
};
using BFS:
class Solution{
  public:
    /*You are required to complete below method */
    int maxLevelSum(Node* root) {
        // Your code here
        if(!root)return 0;
        queue<Node*>q;
        q.push(root);
        int maxi=INT_MIN;
        int level=0;
        vector<int>v;
        while(q.size()){
            int sum=0;
            int s=q.size();
            while(s--){
                Node* current=q.front();
                q.pop();
                sum+=current->data;
                if(current->left)q.push(current->left);
                if(current->right)q.push(current->right);

            }
            v.push_back(sum);
            //maxi=max(sum,maxi);
        }
        for(auto it:v){
            maxi=max(it,maxi);
        }
        return maxi;
    }
};
